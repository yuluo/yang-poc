/* autogenerated by testconf */

/* 2014/24/09 16:51 */

/*
 * Copyright (C) 2014 Cisco Systems, Inc.
 *
 * Author: Petar Koretic <petar.koretic@sartura.hr>
 * Author: Luka Perkov <luka.perkov@sartura.hr>
 *
 * testconf is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * You should have received a copy of the GNU General Public License
 * along with testconf. If not, see <http://www.gnu.org/licenses/>.
 */

var exec = require('child_process').exec;

var netconf = require('./../../core/netconf')

var json_path = require('JSONPath')

var methods = netconf.create_default_methods()

module.exports = methods

methods["namespace"] = { "xmlns" : "urn:ietf:params:xml:ns:yang:ietf-system" }

// non mandatory values are commented out

/* get
	method return structure:
	return object for data
		return { }
	return string if error
		return "error message"
*/

netconf.add_method(methods["get"], "$..system[*]", function(filter)
{
	//input['contact'][0] //string
	//input['hostname'][0] //inet:domain-name
	//input['location'][0] //string

	return { }
})

netconf.add_method(methods["get"], "$..system-state[*]", function(filter)
{

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..clock[*]", function(filter)
{
	//input['timezone-location'][0] //ianatz:iana-timezone
	//input['timezone-utc-offset'][0] //int16

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..ntp[*]", function(filter)
{
	//input['enabled'][0] //boolean

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..dns-resolver[*]", function(filter)
{

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..radius[*]", function(filter)
{

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..authentication[*]", function(filter)
{

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..ntp[*]..udp[*]", function(filter)
{
	//console.log(input['address'][0]) //inet:host
	//input['port'][0] //inet:port-number

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..dns-resolver[*]..options[*]", function(filter)
{
	//input['timeout'][0] //uint8
	//input['attempts'][0] //uint8

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..dns-resolver[*]..udp-and-tcp[*]", function(filter)
{
	//console.log(input['address'][0]) //inet:ip-address
	//input['port'][0] //inet:port-number

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..radius[*]..options[*]", function(filter)
{
	//input['timeout'][0] //uint8
	//input['attempts'][0] //uint8

	return { }
})

netconf.add_method(methods["get"], "$..system[*]..radius[*]..udp[*]", function(filter)
{
	//console.log(input['address'][0]) //inet:host
	//input['authentication-port'][0] //inet:port-number
	//console.log(input['shared-secret'][0]) //string

	return { }
})

netconf.add_method(methods["get"], "$..system-state[*]..platform[*]", function(filter)
{
	//input['os-name'][0] //string
	//input['os-release'][0] //string
	//input['os-version'][0] //string
	//input['machine'][0] //string

	return { }
})

netconf.add_method(methods["get"], "$..system-state[*]..clock[*]", function(filter)
{
	//input['current-datetime'][0] //yang:date-and-time
	//input['boot-datetime'][0] //yang:date-and-time

	return { }
})

/* get-config
	return object for data
		return { }
	return string if error
		return "error message"
*/
netconf.add_method(methods["get-config"], "$..system[*]", function(filter)
{
	//input['contact'][0] //string
	//input['hostname'][0] //inet:domain-name
	//input['location'][0] //string

	return { }
})
netconf.add_method(methods["get-config"], "$..system-state[*]", function(filter)
{

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..clock[*]", function(filter)
{
	//input['timezone-location'][0] //ianatz:iana-timezone
	//input['timezone-utc-offset'][0] //int16

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..ntp[*]", function(filter)
{
	//input['enabled'][0] //boolean

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..dns-resolver[*]", function(filter)
{

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..radius[*]", function(filter)
{

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..authentication[*]", function(filter)
{

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..ntp[*]..udp[*]", function(filter)
{
	//console.log(input['address'][0]) //inet:host
	//input['port'][0] //inet:port-number

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..dns-resolver[*]..options[*]", function(filter)
{
	//input['timeout'][0] //uint8
	//input['attempts'][0] //uint8

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..dns-resolver[*]..udp-and-tcp[*]", function(filter)
{
	//console.log(input['address'][0]) //inet:ip-address
	//input['port'][0] //inet:port-number

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..radius[*]..options[*]", function(filter)
{
	//input['timeout'][0] //uint8
	//input['attempts'][0] //uint8

	return { }
})
netconf.add_method(methods["get-config"], "$..system[*]..radius[*]..udp[*]", function(filter)
{
	//console.log(input['address'][0]) //inet:host
	//input['authentication-port'][0] //inet:port-number
	//console.log(input['shared-secret'][0]) //string

	return { }
})
netconf.add_method(methods["get-config"], "$..system-state[*]..platform[*]", function(filter)
{

	return { }
})
netconf.add_method(methods["get-config"], "$..system-state[*]..clock[*]", function(filter)
{

	return { }
})

/* edit-config
	method return structure:
	return { code : int, msg : string}
	code - nonzero for error, msg - error message
	returns ok by default
*/

netconf.add_method(methods["edit-config"], "$..system[*]", function(input)
{
	//input['contact'][0] //string
	//input['hostname'][0] //inet:domain-name
	//input['location'][0] //string

})


netconf.add_method(methods["edit-config"], "$..system-state[*]", function(input)
{

})


netconf.add_method(methods["edit-config"], "$..system[*]..clock[*]", function(input)
{
	//input['timezone-location'][0] //ianatz:iana-timezone
	//input['timezone-utc-offset'][0] //int16

})


netconf.add_method(methods["edit-config"], "$..system[*]..ntp[*]", function(input)
{
	//input['enabled'][0] //boolean

})


netconf.add_method(methods["edit-config"], "$..system[*]..dns-resolver[*]", function(input)
{

})


netconf.add_method(methods["edit-config"], "$..system[*]..radius[*]", function(input)
{

})


netconf.add_method(methods["edit-config"], "$..system[*]..authentication[*]", function(input)
{

})


netconf.add_method(methods["edit-config"], "$..system[*]..ntp[*]..udp[*]", function(input)
{
	//console.log(input['address'][0]) //inet:host
	//input['port'][0] //inet:port-number

})


netconf.add_method(methods["edit-config"], "$..system[*]..dns-resolver[*]..options[*]", function(input)
{
	//input['timeout'][0] //uint8
	//input['attempts'][0] //uint8

})


netconf.add_method(methods["edit-config"], "$..system[*]..dns-resolver[*]..udp-and-tcp[*]", function(input)
{
	//console.log(input['address'][0]) //inet:ip-address
	//input['port'][0] //inet:port-number

})


netconf.add_method(methods["edit-config"], "$..system[*]..radius[*]..options[*]", function(input)
{
	//input['timeout'][0] //uint8
	//input['attempts'][0] //uint8

})


netconf.add_method(methods["edit-config"], "$..system[*]..radius[*]..udp[*]", function(input)
{
	//console.log(input['address'][0]) //inet:host
	//input['authentication-port'][0] //inet:port-number
	//console.log(input['shared-secret'][0]) //string

})


netconf.add_method(methods["edit-config"], "$..system-state[*]..platform[*]", function(input)
{

})


netconf.add_method(methods["edit-config"], "$..system-state[*]..clock[*]", function(input)
{

})


/* RPC methods
	return structure output
	{'data' : {}}
*/
methods["set-current-datetime"] = function(input, response)
{
	//console.log(input['current-datetime'][0]) //yang:date-and-time

	response({'data' : ''})
}

methods["system-restart"] = function(input, response)
{
	response({'data' : ''})
}

methods["system-shutdown"] = function(input, response)
{
	response({'data' : ''})
}

